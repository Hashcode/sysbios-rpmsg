#!/bin/bash
#
# Copyright (c) 2011, Texas Instruments Incorporated
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# *  Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# *  Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# *  Neither the name of Texas Instruments Incorporated nor the names of
#    its contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#===============================================================================
#
# Usage: genrprc [--e0=core0 entry point] [--e1=core1 entry point]
#          [--t0=core0 trace buffer symbol] [--t1=core1 trace buffer symbol]
#          [--d0=core0 error buffer symbol] [--d1=core1 error buffer symbol]
#          core0_filename [core1_filename] output_filename
#
# Default values for:
#   core0 entry point: "Entry point address:" field from output of
#                      'readelf -h core0_filename'
#   core1 entry point: "Entry point address:" field from output of
#                      'readelf -h core1_filename'
#   core0 trace buffer symbol: SysMin_Module_State_0_outbuf__A
#   core1 trace buffer symbol: SysMin_Module_State_0_outbuf__A
#   core0 error buffer symbol: Deh_Module_State_0_outbuf__A
#   core1 error buffer symbol: Deh_Module_State_0_outbuf__A
#
#===============================================================================

usage=\
"Usage: genrprc [--e0=core0 entry point] [--e1=core1 entry point]
        [--t0=core0 trace buffer symbol] [--t1=core1 trace buffer symbol]
        [--d0=core0 error buffer symbol] [--d1=core1 error buffer symbol]
        core0_filename [core1_filename] output_filename"

dir=`dirname $0`

tracename0=SysMin_Module_State_0_outbuf__A
tracename1=SysMin_Module_State_0_outbuf__A
entryname0=
entryname1=
errbufname0=Deh_Module_State_0_outbuf__A
errbufname1=Deh_Module_State_0_outbuf__A

cmdline=`getopt -o "" --long e0:,e1:,t0:,t1:,d0:,d1: --name $0 -- "$@"`
err=$?
if [[ $err != 0 ]]
then
	echo getopt returned $err
	echo $usage
	exit 1
fi

# set new positional parameters with all options placed before script args
eval set -- "$cmdline"
while true ; do
    case "$1" in
	--e0) entryname0=$2; shift 2;;
	--e1) entryname1=$2; shift 2;;
	--t0) tracename0=$2; shift 2;;
	--t1) tracename1=$2; shift 2;;
	--d0) errbufname0=$2; shift 2;;
	--d1) errbufname1=$2; shift 2;;
	--) shift; break;;
    esac
done

if [[ $# == 3 ]]
then
	core0file=$1
	core1file=$2
	outfile=$3
	shift 3

	traceaddr0=`nm $core0file | grep $tracename0 | cut -d ' ' -f 1`
	traceaddr1=`nm $core1file | grep $tracename1 | cut -d ' ' -f 1`
	errbufaddr0=`nm $core0file | grep $errbufname0 | cut -d ' ' -f 1`
	errbufaddr1=`nm $core1file | grep $errbufname1 | cut -d ' ' -f 1`
	if [[ $entryname0 == "" ]]
	then
		entryaddr0=`readelf -h $core0file | \
		  grep "Entry point address" | awk '{printf($4)}'`
	else
		entryaddr0=`nm $core0file | \
		  grep $entryname0 | awk '{printf($1)}'`
	fi
	if [[ $entryname1 == "" ]]
	then
		entryaddr1=`readelf -h $core1file | \
		  grep "Entry point address" | awk '{printf($4)}'`
	else
		entryaddr1=`nm $core1file | \
		  grep $entryname1 | awk '{printf($1)}'`
	fi
else
    if [[ $# == 2 ]]
    then
	core0file=$1
	outfile=$2
	shift 2

	traceaddr0=`nm $core0file | grep $tracename0 | cut -d ' ' -f 1`
	errbufaddr0=`nm $core0file | grep $errbufname0 | cut -d ' ' -f 1`
	if [[ $entryname0 == "" ]]
	then
		entryaddr0=`readelf -h $core0file | \
		  grep "Entry point address" | awk '{printf($4)}'`
	else
		entryaddr0=`nm $core0file | \
		  grep $entryname0 | awk '{printf($1)}'`
	fi
    else
	echo $usage
	exit 1
    fi
fi

if [[ $entryaddr0 == "" ]]
then
	echo warning: null entry point for core 0
fi
if [[ $entryaddr1 == "" ]]
then
	echo warning: null entry point for core 1
fi
if [[ $traceaddr0 == "" ]]
then
	echo warning: null trace buffer address for core 0
fi
if [[ $traceaddr1 == "" ]]
then
	echo warning: null trace buffer address for core 1
fi
if [[ $errbufaddr0 == "" ]]
then
	echo warning: null error buffer address for core 0
fi
if [[ $errbufaddr1 == "" ]]
then
	echo warning: null error buffer address for core 1
fi


file_info=`file $outfile`
foo=`echo $file_info | grep executable`
#
# Make sure we don't overwrite executable.
# User might have mistakenly forgotten to specify output file name.
#
if [[ $foo != "" ]]
then
	echo error: output file \'$outfile\' is of type \"executable\" but should be a data file
	echo $usage
	exit 1
fi

tmp=/tmp/genrprc-$$

echo $dir/mkheader $core0file $core1file $outfile
$dir/mkheader $core0file $core1file $outfile
if [[ $? != 0 ]]
then
	echo mkheader failed
	echo $usage
	exit 1
fi

#
# genbase (invoked below) accepts any number of "key:value" tags on its
# command invocation.  Today, the supported tags are:
#	restab:<hex-addr>
#	trace[0-9]:<hex-addr>
#	errbuf[0-9]:<hex-addr>
#	entry[0-9]:<hex-addr>
# where <hex-addr> is an address in hexadecimal form w/ or w/o leading "0x",
# and the [0-9] field specifies a "core number".
#
# restab is the key name for the (possibly nonexistant) .resource_table
# linker section, and its value is the section's address.  When genbase
# encounters a linker section whose address matches the restab value, it
# calls a special resource table processing function for that section.
#
# trace[0-9] is the key name for core 0's executable file's trace buffer,
# and its value is the trace buffer's address.  When genbase encounters
# a resource (from the .resource_table table) of type TRACE it assigns
# that resource's "base" element to the value of key trace[0-9] (the 1st
# type TRACE resource gets the value of trace0, the 2nd type TRACE resource
# gets the value of trace1, etc.).
#
# errbuf[0-9] is the key name for core 0's executable file's crash-dump buffer,
# and its value is the crash-dump buffer's address.  When genbase encounters
# a resource (from the .resource_table table) of type ERRBUF it assigns
# that resource's "base" element to the value of key errbuf[0-9] (the 1st
# type ERRBUF resource gets the value of errbuf0, the 2nd type ERRBUF resource
# gets the value of errbuf1, etc.).
#
# entry[0-9] is the key name for core 0's executable file's entry point,
# and its value is the entry point's address.  When genbase encounters
# a resource (from the .resource_table table) of type ENTRYPOINT it assigns
# that resource's "base" element to the value of key entry[0-9] (the 1st
# type ENTRYPOINT resource gets the value of entry0, the 2nd type ENTRYPOINT
# resource gets the value of entry1, etc.).
#

if [[ $traceaddr0 == "" ]]
then
	trace0=
else
	trace0="trace0:$traceaddr0"
fi
if [[ $traceaddr1 == "" ]]
then
	trace1=
else
	trace1="trace1:$traceaddr1"
fi
if [[ $errbufaddr0 == "" ]]
then
	errbuf0=
else
	errbuf0="errbuf0:$errbufaddr0"
fi
if [[ $errbufaddr1 == "" ]]
then
	errbuf1=
else
	errbuf1="errbuf1:$errbufaddr1"
fi
if [[ $entryaddr0 == "" ]]
then
	entry0=
else
	entry0="entry0:$entryaddr0"
fi
if [[ $entryaddr1 == "" ]]
then
	entry1=
else
	entry1="entry1:$entryaddr1"
fi

if [[ -f $core0file ]]
then
	t0Size=`readelf -S $core0file | \
	  awk '{if ($2==".tracebuf") printf("%s", $6)}'`
else
	t0Size=0
fi

if [[ -f $core1file ]]
then
	t1Size=`readelf -S $core1file | \
	  awk '{if ($2==".tracebuf") printf("%s", $6)}'`
else
	t1Size=0
fi

if [[ -f $core0file ]]
then
	d0Size=`readelf -S $core0file | \
	  awk '{if ($2==".errorbuf") printf("%s", $6)}'`
else
	d0Size=0
fi

if [[ -f $core1file ]]
then
	d1Size=`readelf -S $core1file | \
	  awk '{if ($2==".errorbuf") printf("%s", $6)}'`
else
	d1Size=0
fi

if [[ -f $core0file ]]
then
	resource_tab=`readelf -S $core0file | \
	  awk '{if ($2==".resource_table") printf("%s", $4)}'`
	r_size=`readelf -S $core0file | \
	  awk '{if ($2==".resource_table") printf("%s", $6)}'`
	if [[ $resource_tab == "" ]]
	then
		echo no .resource_tab section found in $core0file
		echo $dir/genbase $core0file $tmp $*
		$dir/genbase $core0file $tmp $*
	else
		echo $dir/genbase $core0file $tmp $* restab:$resource_tab:$r_size \
		  $trace0:$t0Size $trace1:$t1Size $entry0:0 $entry1:0 \
		  $errbuf0:$d0Size $errbuf1:$d1Size
		$dir/genbase $core0file $tmp $* restab:$resource_tab:$r_size \
		  $trace0:$t0Size $trace1:$t1Size $entry0:0 $entry1:0 \
		  $errbuf0:$d0Size $errbuf1:$d1Size
	fi

	cat $tmp >> $outfile
	rm $tmp
fi


if [[ -f $core1file ]]
then
	resource_tab=`readelf -S $core1file | \
	  awk '{if ($2==".resource_table") printf("%s", $4)}'`
	r_size=`readelf -S $core1file | \
	  awk '{if ($2==".resource_table") printf("%s", $6)}'`
	if [[ $resource_tab == "" ]]
	then
		echo no .resource_tab section found in $core1file
		echo $dir/genbase $core1file $tmp $*
		$dir/genbase $core1file $tmp $*
	else
		echo $dir/genbase $core1file $tmp $* restab:$resource_tab:$r_size \
		  $trace0:$t0Size $trace1:$t1Size $entry0:0 $entry1:0 \
		  $errbuf0:$d0Size $errbuf1:$d1Size
		$dir/genbase $core1file $tmp $* restab:$resource_tab:$r_size \
		  $trace0:$t0Size $trace1:$t1Size $entry0:0 $entry1:0 \
		  $errbuf0:$d0Size $errbuf1:$d1Size
	fi

	cat $tmp >> $outfile
	rm $tmp
fi

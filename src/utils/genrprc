#!/bin/bash
#
# Copyright (c) 2011-2013, Texas Instruments Incorporated
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# *  Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# *  Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# *  Neither the name of Texas Instruments Incorporated nor the names of
#    its contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#===============================================================================
#
# Usage: genrprc [--t0=core0 trace buffer symbol] [--t1=core1 trace buffer symbol]
#          core0_filename core1_filename output_filename
#
# Default values for:
#   core0 trace buffer symbol: SysMin_Module_State_0_outbuf__A
#   core1 trace buffer symbol: SysMin_Module_State_0_outbuf__A
#
#===============================================================================

usage=\
"Usage: genrprc [--t0=core0 trace buffer symbol] [--t1=core1 trace buffer symbol]
        core0_filename core1_filename output_filename"

dir=`dirname $0`

tracename0=SysMin_Module_State_0_outbuf__A
tracename1=SysMin_Module_State_0_outbuf__A

cmdline=`getopt -o "" --long t0:,t1:, --name $0 -- "$@"`
err=$?
if [[ $err != 0 ]]
then
	echo getopt returned $err
	echo $usage
	exit 1
fi

# set new positional parameters with all options placed before script args
eval set -- "$cmdline"
while true ; do
    case "$1" in
	--t0) tracename0=$2; shift 2;;
	--t1) tracename1=$2; shift 2;;
	--) shift; break;;
    esac
done

# exit if all the files are not passed in
if [[ $# == 3 ]]
then
	core0file=$1
	core1file=$2
	outfile=$3
	shift 3
else
	echo $usage
	exit 1
fi

# make sure output file has an ELF ARM M3 extension and remove if exists
ext=`basename $outfile | awk -F . '{print $NF}'`
if [[ $ext != "xem3" ]]
then
	echo error: outfile file \'$outfile\' does not have xem3 extension
	echo $usage
	exit 1
fi
if [[ -f $outfile ]]
then
	echo warning: deleting existing output file
	rm $outfile
fi

# make sure core0 file is an ELF ARM M3 executable
if [[ -f $core0file ]]
then
	ext=`basename $core0file | awk -F . '{print $NF}'`
	if [[ $ext != "xem3" ]]
	then
		echo error: core0 input file \'$core0file\' does not have xem3 extension
		echo $usage
		exit 1
	fi
else
	echo error: core0 input file \'$core0file\' does not exist
	echo $usage
	exit 1
fi

# make sure it is a proper executable file
file_info=`file $core0file`
foo=`echo $file_info | grep executable`
if [[ $foo == "" ]]
then
	echo error: output file \'$core0file\' is not of type \"executable\" but should be one
	echo $usage
	exit 1
fi

# make sure core1 file is an ELF ARM M3 executable
if [[ -f $core1file ]]
then
	ext=`basename $core1file | awk -F . '{print $NF}'`
	if [[ $ext != "xem3" ]]
	then
		echo error: core1 input file \'$core1file\' does not have xem3 extension
		echo $usage
		exit 1
	fi
else
	echo error: core1 input file \'$core1file\' does not exist
	echo $usage
	exit 1
fi

# make sure it is a proper executable file
file_info=`file $core1file`
foo=`echo $file_info | grep executable`
if [[ $foo == "" ]]
then
	echo error: output file \'$core1file\' is not of type \"executable\" but should be one
	echo $usage
	exit 1
fi

# make sure core0 file has a resource table
if [[ -f $core0file ]]
then
	resource_tab=`readelf -S $core0file | \
	  awk '{if ($2==".resource_table") printf("%s", $4)}'`
	r_size=`readelf -S $core0file | \
	  awk '{if ($2==".resource_table") printf("%s", $6)}'`
	if [[ $resource_tab == "" ]]
	then
		echo error: Core0 file \'$core0file\' is missing the resource table.
		echo $usage
		exit 1
	fi
fi

traceaddr0=`nm $core0file | grep $tracename0 | cut -d ' ' -f 1`
traceaddr1=`nm $core1file | grep $tracename1 | cut -d ' ' -f 1`
t0Size=`readelf -S $core0file | \
		awk '{if ($2==".tracebuf") printf("%s", $6)}'`
t1Size=`readelf -S $core1file | \
		awk '{if ($2==".tracebuf") printf("%s", $6)}'`

core0stripfile=core0-tmp.xem3
core1stripfile=core1-tmp.xem3

#
# gencmbelf (invoked below) accepts any number of "key:value" tags on its
# command invocation.  Today, the supported tags are:
#	trace[0-9]:<hex-addr>
# where <hex-addr> is an address in hexadecimal form w/ or w/o leading "0x",
# and the [0-9] field specifies a "core number".
#
# trace[0-9] is the key name for core 0's executable file's trace buffer,
# and its value is the trace buffer's address.  When gencmbelf encounters
# a resource (from the .resource_table table) of type TRACE it assigns
# that resource's "base" element to the value of key trace[0-9] (the 1st
# type TRACE resource gets the value of trace0, the 2nd type TRACE resource
# gets the value of trace1, etc.). Only trace1 will be updated today as the
# trace0 in the core0 resource table already reflects the correct base and
# size.
#

args=
if [[ $traceaddr0 != "" ]]
then
	args="$args trace0:$traceaddr0:$t0Size"
else
	echo warning: null trace buffer address for core 0
fi
if [[ $traceaddr1 != "" ]]
then
	args="$args trace1:$traceaddr1:$t1Size"
else
	echo warning: null trace buffer address for core 1
fi

# strip the input images of all symbols and debug info
$TMS470CGTOOLPATH/bin/armstrip -p $core0file -o $core0stripfile
$TMS470CGTOOLPATH/bin/armstrip -p $core1file -o $core1stripfile

#
# invoke gencmbelf to generate a single combined output file
# using the stripped images
#
echo $dir/gencmbelf $core0stripfile $core1stripfile $outfile
$dir/gencmbelf $core0stripfile $core1stripfile $outfile

# remove the generated intermediate stripped images
rm $core0stripfile
rm $core1stripfile
